Процедура ПодключитьКомпонентуСервер(КомпонентаПодключена = Неопределено)  Экспорт 
	
	АдресВоВременномХранилище = ПолучитьАдресМакетаКомпановкиНаСервере();
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
			АдресВоВременномХранилище,
			"BITERP",
			ТипВнешнейКомпоненты.Native);
	Сообщить(НСтр("ru = 'Компонента подключена!'"));
КонецПроцедуры         


Функция ПолучитьАдресМакетаКомпановкиНаСервере()  
	УникальныйИдентификатор = Новый УникальныйИдентификатор();
	МакетВнешнейКомпоненты    = Обработки.RabbitMQ.ПолучитьМакет("ВнешняяКомпонента");
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетВнешнейКомпоненты, УникальныйИдентификатор);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции  


Функция ПолучитьПараметры() Экспорт
	Параметры = Новый Структура("ОтветноеСообщение");
	Параметры.Вставить("Адрес", "192.168.31.10");
	Параметры.Вставить("Порт",5672);
	Параметры.Вставить("Логин", "1");
	Параметры.Вставить("Пароль", "1");
	Параметры.Вставить("ВиртуальныйХост", "/");
	
	Параметры.Вставить("ТочкаОбмена", "orders");
	Параметры.Вставить("ИмяОчереди","orders01");
	Параметры.Вставить("ТекстСообщения","test");
	Возврат Параметры;
КонецФункции     

Процедура СозданиеТочкиИОчередиСервер()  Экспорт
	
	КлиентКомпоненты = ПолучитьКомпонентуСервер(Новый УникальныйИдентификатор());
	СозданиеТочкиИОчередиКлиентСервер(КлиентКомпоненты, ПолучитьПараметры());
	
КонецПроцедуры


Процедура СозданиеТочкиИОчередиКлиентСервер(КлиентКомпоненты, Параметры)
	 Если не Константы.СозданаОчередь.Получить() Тогда
	Попытка
		КлиентКомпоненты.Connect(
			Параметры.Адрес,
			Параметры.Порт,
			Параметры.Логин,
			Параметры.Пароль,
			Параметры.ВиртуальныйХост);
			
		ТочкаОбмена = Параметры.ТочкаОбмена;
		ИмяОчереди  = Параметры.ИмяОчереди;
		
		КлиентКомпоненты.DeclareExchange(ТочкаОбмена, "topic", Ложь, Истина, Ложь);
		КлиентКомпоненты.DeclareQueue(ИмяОчереди, Ложь, Ложь, Ложь, Ложь);
		КлиентКомпоненты.BindQueue(ИмяОчереди, ТочкаОбмена, "#" + ИмяОчереди + "#");
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка создания точек и очередей!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Сообщить("Точки и очереди успешно созданы!");  
	Константы.СозданаОчередь.Установить(Истина);
Иначе         
	
	КонецЕсли;
КонецПроцедуры




Процедура ПроверитьПодключениеСервер(УникальныйИдентификатор) Экспорт 
	Параметры = ПолучитьПараметры();
	КлиентКомпоненты = ПолучитьКомпонентуСервер(УникальныйИдентификатор);
	ПроверитьПодключениеКлиентСервер(КлиентКомпоненты, Параметры);
	
КонецПроцедуры


Процедура ПроверитьПодключениеКлиентСервер(КлиентКомпоненты, Параметры)
	
	Попытка
		КлиентКомпоненты.Connect(
				Параметры.Адрес,
				Параметры.Порт,
				Параметры.Логин,
				Параметры.Пароль,
				Параметры.ВиртуальныйХост);
			Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка подключения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Сообщить(НСтр("ru = 'Подключение успешно выполнено!'"));
	
КонецПроцедуры    

Функция ПолучитьКомпонентуСервер(УникальныйИдентификатор)  Экспорт
	
	КлиентКомпоненты = Неопределено;
	Если Не ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты) Тогда
		
		ПодключитьКомпонентуСервер(УникальныйИдентификатор);
		ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты);
		
	КонецЕсли;
	
	Возврат КлиентКомпоненты;
КонецФункции     

Функция ИнициализироватьКомпонентуКлиентСервер(Компонента)
	
	Попытка
		Компонента  = Новый("AddIn.BITERP.PinkRabbitMQ");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции



Функция  ПрочитатьСообщениеСервер()  Экспорт
	
	КлиентКомпоненты = ПолучитьКомпонентуСервер(Новый УникальныйИдентификатор());
	Параметры  = ПолучитьПараметры();
	ПрочитатьСообщениеКлиентСервер(КлиентКомпоненты, Параметры);
	Возврат  Параметры;
КонецФункции


Процедура ПрочитатьСообщениеКлиентСервер(КлиентКомпоненты, Параметры)
	
	Попытка
		КлиентКомпоненты.Connect(
			Параметры.Адрес,
			Параметры.Порт,
			Параметры.Логин,
			Параметры.Пароль,
			Параметры.ВиртуальныйХост);
		
		ИмяОчереди = Параметры.ИмяОчереди;
		
		Попытка
			КлиентКомпоненты.DeclareQueue(ИмяОчереди, Ложь, Ложь, Ложь, Ложь);
			
			Потребитель = КлиентКомпоненты.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
			
			ОтветноеСообщение = "";
			Если КлиентКомпоненты.BasicConsumeMessage("", ОтветноеСообщение, 5) Тогда
				КлиентКомпоненты.BasicAck();
				Параметры.ОтветноеСообщение = ОтветноеСообщение;
				ТекстСообщения = НСтр("ru='Сообщение успешно прочитано!'");
			Иначе
				Параметры.ОтветноеСообщение = ОтветноеСообщение;
				ТекстСообщения = НСтр("ru='Очередь пустая!'");
			КонецЕсли;
			//Сообщить(ТекстСообщения);
			
			КлиентКомпоненты.BasicCancel("");
		Исключение
			ВызватьИсключение КлиентКомпоненты.GetLastError();
		КонецПопытки;
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка чтения сообщения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецПроцедуры



